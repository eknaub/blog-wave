/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiUsersUserIdFollowersGet } from '../fn/followers/api-users-user-id-followers-get';
import { ApiUsersUserIdFollowersGet$Params } from '../fn/followers/api-users-user-id-followers-get';
import { apiUsersUserIdFollowersPost } from '../fn/followers/api-users-user-id-followers-post';
import { ApiUsersUserIdFollowersPost$Params } from '../fn/followers/api-users-user-id-followers-post';
import { apiUsersUserIdFollowersUnfollowIdDelete } from '../fn/followers/api-users-user-id-followers-unfollow-id-delete';
import { ApiUsersUserIdFollowersUnfollowIdDelete$Params } from '../fn/followers/api-users-user-id-followers-unfollow-id-delete';
import { apiUsersUserIdFollowingGet } from '../fn/followers/api-users-user-id-following-get';
import { ApiUsersUserIdFollowingGet$Params } from '../fn/followers/api-users-user-id-following-get';
import { BaseFollower } from '../models/base-follower';
import { Follower } from '../models/follower';

@Injectable({ providedIn: 'root' })
export class FollowersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiUsersUserIdFollowersGet()` */
  static readonly ApiUsersUserIdFollowersGetPath = '/api/users/{userId}/followers';

  /**
   * Get all followers of a user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersUserIdFollowersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserIdFollowersGet$Response(params: ApiUsersUserIdFollowersGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Follower>>> {
    return apiUsersUserIdFollowersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all followers of a user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersUserIdFollowersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserIdFollowersGet(params: ApiUsersUserIdFollowersGet$Params, context?: HttpContext): Observable<Array<Follower>> {
    return this.apiUsersUserIdFollowersGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Follower>>): Array<Follower> => r.body)
    );
  }

  /** Path part for operation `apiUsersUserIdFollowersPost()` */
  static readonly ApiUsersUserIdFollowersPostPath = '/api/users/{userId}/followers';

  /**
   * Add a follower to a user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersUserIdFollowersPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiUsersUserIdFollowersPost$Response(params: ApiUsersUserIdFollowersPost$Params, context?: HttpContext): Observable<StrictHttpResponse<BaseFollower>> {
    return apiUsersUserIdFollowersPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Add a follower to a user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersUserIdFollowersPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiUsersUserIdFollowersPost(params: ApiUsersUserIdFollowersPost$Params, context?: HttpContext): Observable<BaseFollower> {
    return this.apiUsersUserIdFollowersPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<BaseFollower>): BaseFollower => r.body)
    );
  }

  /** Path part for operation `apiUsersUserIdFollowersUnfollowIdDelete()` */
  static readonly ApiUsersUserIdFollowersUnfollowIdDeletePath = '/api/users/{userId}/followers/{unfollowId}';

  /**
   * Remove a follower from a user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersUserIdFollowersUnfollowIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserIdFollowersUnfollowIdDelete$Response(params: ApiUsersUserIdFollowersUnfollowIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<BaseFollower>> {
    return apiUsersUserIdFollowersUnfollowIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Remove a follower from a user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersUserIdFollowersUnfollowIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserIdFollowersUnfollowIdDelete(params: ApiUsersUserIdFollowersUnfollowIdDelete$Params, context?: HttpContext): Observable<BaseFollower> {
    return this.apiUsersUserIdFollowersUnfollowIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<BaseFollower>): BaseFollower => r.body)
    );
  }

  /** Path part for operation `apiUsersUserIdFollowingGet()` */
  static readonly ApiUsersUserIdFollowingGetPath = '/api/users/{userId}/following';

  /**
   * Get all users a user is following.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersUserIdFollowingGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserIdFollowingGet$Response(params: ApiUsersUserIdFollowingGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Follower>>> {
    return apiUsersUserIdFollowingGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all users a user is following.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersUserIdFollowingGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserIdFollowingGet(params: ApiUsersUserIdFollowingGet$Params, context?: HttpContext): Observable<Array<Follower>> {
    return this.apiUsersUserIdFollowingGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Follower>>): Array<Follower> => r.body)
    );
  }

}
