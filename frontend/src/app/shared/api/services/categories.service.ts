/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiCategoriesCategoryIdDelete } from '../fn/categories/api-categories-category-id-delete';
import { ApiCategoriesCategoryIdDelete$Params } from '../fn/categories/api-categories-category-id-delete';
import { apiCategoriesCategoryIdGet } from '../fn/categories/api-categories-category-id-get';
import { ApiCategoriesCategoryIdGet$Params } from '../fn/categories/api-categories-category-id-get';
import { apiCategoriesCategoryIdPut } from '../fn/categories/api-categories-category-id-put';
import { ApiCategoriesCategoryIdPut$Params } from '../fn/categories/api-categories-category-id-put';
import { apiCategoriesGet } from '../fn/categories/api-categories-get';
import { ApiCategoriesGet$Params } from '../fn/categories/api-categories-get';
import { apiCategoriesPost } from '../fn/categories/api-categories-post';
import { ApiCategoriesPost$Params } from '../fn/categories/api-categories-post';
import { Category } from '../models/category';

@Injectable({ providedIn: 'root' })
export class CategoriesService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiCategoriesGet()` */
  static readonly ApiCategoriesGetPath = '/api/categories';

  /**
   * Get all categories.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoriesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesGet$Response(params?: ApiCategoriesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Category>>> {
    return apiCategoriesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all categories.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoriesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesGet(params?: ApiCategoriesGet$Params, context?: HttpContext): Observable<Array<Category>> {
    return this.apiCategoriesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Category>>): Array<Category> => r.body)
    );
  }

  /** Path part for operation `apiCategoriesPost()` */
  static readonly ApiCategoriesPostPath = '/api/categories';

  /**
   * Create a new category.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoriesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiCategoriesPost$Response(params: ApiCategoriesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Category>> {
    return apiCategoriesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new category.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoriesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiCategoriesPost(params: ApiCategoriesPost$Params, context?: HttpContext): Observable<Category> {
    return this.apiCategoriesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Category>): Category => r.body)
    );
  }

  /** Path part for operation `apiCategoriesCategoryIdGet()` */
  static readonly ApiCategoriesCategoryIdGetPath = '/api/categories/{categoryId}';

  /**
   * Get category by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoriesCategoryIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesCategoryIdGet$Response(params: ApiCategoriesCategoryIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Category>> {
    return apiCategoriesCategoryIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get category by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoriesCategoryIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesCategoryIdGet(params: ApiCategoriesCategoryIdGet$Params, context?: HttpContext): Observable<Category> {
    return this.apiCategoriesCategoryIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Category>): Category => r.body)
    );
  }

  /** Path part for operation `apiCategoriesCategoryIdPut()` */
  static readonly ApiCategoriesCategoryIdPutPath = '/api/categories/{categoryId}';

  /**
   * Update category by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoriesCategoryIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiCategoriesCategoryIdPut$Response(params: ApiCategoriesCategoryIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Category>> {
    return apiCategoriesCategoryIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update category by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoriesCategoryIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiCategoriesCategoryIdPut(params: ApiCategoriesCategoryIdPut$Params, context?: HttpContext): Observable<Category> {
    return this.apiCategoriesCategoryIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<Category>): Category => r.body)
    );
  }

  /** Path part for operation `apiCategoriesCategoryIdDelete()` */
  static readonly ApiCategoriesCategoryIdDeletePath = '/api/categories/{categoryId}';

  /**
   * Delete category by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiCategoriesCategoryIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesCategoryIdDelete$Response(params: ApiCategoriesCategoryIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Category>> {
    return apiCategoriesCategoryIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete category by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiCategoriesCategoryIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiCategoriesCategoryIdDelete(params: ApiCategoriesCategoryIdDelete$Params, context?: HttpContext): Observable<Category> {
    return this.apiCategoriesCategoryIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<Category>): Category => r.body)
    );
  }

}
