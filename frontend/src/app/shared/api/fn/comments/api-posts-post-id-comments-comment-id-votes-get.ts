/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
import { filter, map } from 'rxjs/operators';
import { StrictHttpResponse } from '../../strict-http-response';
import { RequestBuilder } from '../../request-builder';

import { CommentVote } from '../../models/comment-vote';

export interface ApiPostsPostIdCommentsCommentIdVotesGet$Params {
  postId: number;
  commentId: number;

/**
 * Filter by vote type (LIKE or DISLIKE)
 */
  type?: 'LIKE' | 'DISLIKE';
}

export function apiPostsPostIdCommentsCommentIdVotesGet(http: HttpClient, rootUrl: string, params: ApiPostsPostIdCommentsCommentIdVotesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CommentVote>>> {
  const rb = new RequestBuilder(rootUrl, apiPostsPostIdCommentsCommentIdVotesGet.PATH, 'get');
  if (params) {
    rb.path('postId', params.postId, {});
    rb.path('commentId', params.commentId, {});
    rb.query('type', params.type, {});
  }

  return http.request(
    rb.build({ responseType: 'json', accept: 'application/json', context })
  ).pipe(
    filter((r: any): r is HttpResponse<any> => r instanceof HttpResponse),
    map((r: HttpResponse<any>) => {
      return r as StrictHttpResponse<Array<CommentVote>>;
    })
  );
}

apiPostsPostIdCommentsCommentIdVotesGet.PATH = '/api/posts/{postId}/comments/{commentId}/votes';
