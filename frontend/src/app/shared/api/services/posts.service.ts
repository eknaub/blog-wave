/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiPostsGet } from '../fn/posts/api-posts-get';
import { ApiPostsGet$Params } from '../fn/posts/api-posts-get';
import { apiPostsPost } from '../fn/posts/api-posts-post';
import { ApiPostsPost$Params } from '../fn/posts/api-posts-post';
import { apiPostsPostIdDelete } from '../fn/posts/api-posts-post-id-delete';
import { ApiPostsPostIdDelete$Params } from '../fn/posts/api-posts-post-id-delete';
import { apiPostsPostIdPut } from '../fn/posts/api-posts-post-id-put';
import { ApiPostsPostIdPut$Params } from '../fn/posts/api-posts-post-id-put';
import { apiPostsPostIdVotesGet } from '../fn/posts/api-posts-post-id-votes-get';
import { ApiPostsPostIdVotesGet$Params } from '../fn/posts/api-posts-post-id-votes-get';
import { apiPostsPostIdVotesPost } from '../fn/posts/api-posts-post-id-votes-post';
import { ApiPostsPostIdVotesPost$Params } from '../fn/posts/api-posts-post-id-votes-post';
import { Post } from '../models/post';
import { PostVote } from '../models/post-vote';

@Injectable({ providedIn: 'root' })
export class PostsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiPostsGet()` */
  static readonly ApiPostsGetPath = '/api/posts';

  /**
   * Get all posts.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPostsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPostsGet$Response(params?: ApiPostsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Post>>> {
    return apiPostsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all posts.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPostsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPostsGet(params?: ApiPostsGet$Params, context?: HttpContext): Observable<Array<Post>> {
    return this.apiPostsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Post>>): Array<Post> => r.body)
    );
  }

  /** Path part for operation `apiPostsPost()` */
  static readonly ApiPostsPostPath = '/api/posts';

  /**
   * Create a new post.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPostsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiPostsPost$Response(params: ApiPostsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Post>> {
    return apiPostsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new post.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPostsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiPostsPost(params: ApiPostsPost$Params, context?: HttpContext): Observable<Post> {
    return this.apiPostsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Post>): Post => r.body)
    );
  }

  /** Path part for operation `apiPostsPostIdPut()` */
  static readonly ApiPostsPostIdPutPath = '/api/posts/{postId}';

  /**
   * Update a post.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPostsPostIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiPostsPostIdPut$Response(params: ApiPostsPostIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Post>> {
    return apiPostsPostIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a post.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPostsPostIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiPostsPostIdPut(params: ApiPostsPostIdPut$Params, context?: HttpContext): Observable<Post> {
    return this.apiPostsPostIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<Post>): Post => r.body)
    );
  }

  /** Path part for operation `apiPostsPostIdDelete()` */
  static readonly ApiPostsPostIdDeletePath = '/api/posts/{postId}';

  /**
   * Delete a post.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPostsPostIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPostsPostIdDelete$Response(params: ApiPostsPostIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Post>> {
    return apiPostsPostIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a post.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPostsPostIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPostsPostIdDelete(params: ApiPostsPostIdDelete$Params, context?: HttpContext): Observable<Post> {
    return this.apiPostsPostIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<Post>): Post => r.body)
    );
  }

  /** Path part for operation `apiPostsPostIdVotesGet()` */
  static readonly ApiPostsPostIdVotesGetPath = '/api/posts/{postId}/votes';

  /**
   * Get all votes for a post (likes/dislikes).
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPostsPostIdVotesGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPostsPostIdVotesGet$Response(params: ApiPostsPostIdVotesGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<PostVote>>> {
    return apiPostsPostIdVotesGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all votes for a post (likes/dislikes).
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPostsPostIdVotesGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPostsPostIdVotesGet(params: ApiPostsPostIdVotesGet$Params, context?: HttpContext): Observable<Array<PostVote>> {
    return this.apiPostsPostIdVotesGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<PostVote>>): Array<PostVote> => r.body)
    );
  }

  /** Path part for operation `apiPostsPostIdVotesPost()` */
  static readonly ApiPostsPostIdVotesPostPath = '/api/posts/{postId}/votes';

  /**
   * Vote (like or dislike) on a post.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPostsPostIdVotesPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiPostsPostIdVotesPost$Response(params: ApiPostsPostIdVotesPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Post>> {
    return apiPostsPostIdVotesPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Vote (like or dislike) on a post.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPostsPostIdVotesPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiPostsPostIdVotesPost(params: ApiPostsPostIdVotesPost$Params, context?: HttpContext): Observable<Post> {
    return this.apiPostsPostIdVotesPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Post>): Post => r.body)
    );
  }

}
