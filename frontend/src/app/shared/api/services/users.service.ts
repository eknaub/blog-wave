/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiUsersGet } from '../fn/users/api-users-get';
import { ApiUsersGet$Params } from '../fn/users/api-users-get';
import { apiUsersUserIdDelete } from '../fn/users/api-users-user-id-delete';
import { ApiUsersUserIdDelete$Params } from '../fn/users/api-users-user-id-delete';
import { apiUsersUserIdGet } from '../fn/users/api-users-user-id-get';
import { ApiUsersUserIdGet$Params } from '../fn/users/api-users-user-id-get';
import { apiUsersUserIdPut } from '../fn/users/api-users-user-id-put';
import { ApiUsersUserIdPut$Params } from '../fn/users/api-users-user-id-put';
import { User } from '../models/user';

@Injectable({ providedIn: 'root' })
export class UsersService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiUsersGet()` */
  static readonly ApiUsersGetPath = '/api/users';

  /**
   * Get all users.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersGet$Response(params?: ApiUsersGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<User>>> {
    return apiUsersGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all users.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersGet(params?: ApiUsersGet$Params, context?: HttpContext): Observable<Array<User>> {
    return this.apiUsersGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<User>>): Array<User> => r.body)
    );
  }

  /** Path part for operation `apiUsersUserIdGet()` */
  static readonly ApiUsersUserIdGetPath = '/api/users/{userId}';

  /**
   * Get a user by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersUserIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserIdGet$Response(params: ApiUsersUserIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return apiUsersUserIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get a user by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersUserIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserIdGet(params: ApiUsersUserIdGet$Params, context?: HttpContext): Observable<User> {
    return this.apiUsersUserIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `apiUsersUserIdPut()` */
  static readonly ApiUsersUserIdPutPath = '/api/users/{userId}';

  /**
   * Update a user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersUserIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiUsersUserIdPut$Response(params: ApiUsersUserIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<User>> {
    return apiUsersUserIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersUserIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiUsersUserIdPut(params: ApiUsersUserIdPut$Params, context?: HttpContext): Observable<User> {
    return this.apiUsersUserIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<User>): User => r.body)
    );
  }

  /** Path part for operation `apiUsersUserIdDelete()` */
  static readonly ApiUsersUserIdDeletePath = '/api/users/{userId}';

  /**
   * Delete a user.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiUsersUserIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserIdDelete$Response(params: ApiUsersUserIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return apiUsersUserIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a user.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiUsersUserIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiUsersUserIdDelete(params: ApiUsersUserIdDelete$Params, context?: HttpContext): Observable<void> {
    return this.apiUsersUserIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
