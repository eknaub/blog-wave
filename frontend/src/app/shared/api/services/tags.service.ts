/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiTagsGet } from '../fn/tags/api-tags-get';
import { ApiTagsGet$Params } from '../fn/tags/api-tags-get';
import { apiTagsPost } from '../fn/tags/api-tags-post';
import { ApiTagsPost$Params } from '../fn/tags/api-tags-post';
import { apiTagsTagIdDelete } from '../fn/tags/api-tags-tag-id-delete';
import { ApiTagsTagIdDelete$Params } from '../fn/tags/api-tags-tag-id-delete';
import { apiTagsTagIdGet } from '../fn/tags/api-tags-tag-id-get';
import { ApiTagsTagIdGet$Params } from '../fn/tags/api-tags-tag-id-get';
import { apiTagsTagIdPut } from '../fn/tags/api-tags-tag-id-put';
import { ApiTagsTagIdPut$Params } from '../fn/tags/api-tags-tag-id-put';
import { Tag } from '../models/tag';

@Injectable({ providedIn: 'root' })
export class TagsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiTagsGet()` */
  static readonly ApiTagsGetPath = '/api/tags';

  /**
   * Get all tags.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTagsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTagsGet$Response(params?: ApiTagsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Tag>>> {
    return apiTagsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all tags.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTagsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTagsGet(params?: ApiTagsGet$Params, context?: HttpContext): Observable<Array<Tag>> {
    return this.apiTagsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Tag>>): Array<Tag> => r.body)
    );
  }

  /** Path part for operation `apiTagsPost()` */
  static readonly ApiTagsPostPath = '/api/tags';

  /**
   * Create a new tag.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTagsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiTagsPost$Response(params: ApiTagsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Tag>> {
    return apiTagsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new tag.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTagsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiTagsPost(params: ApiTagsPost$Params, context?: HttpContext): Observable<Tag> {
    return this.apiTagsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Tag>): Tag => r.body)
    );
  }

  /** Path part for operation `apiTagsTagIdGet()` */
  static readonly ApiTagsTagIdGetPath = '/api/tags/{tagId}';

  /**
   * Get tag by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTagsTagIdGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTagsTagIdGet$Response(params: ApiTagsTagIdGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Tag>> {
    return apiTagsTagIdGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get tag by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTagsTagIdGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTagsTagIdGet(params: ApiTagsTagIdGet$Params, context?: HttpContext): Observable<Tag> {
    return this.apiTagsTagIdGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Tag>): Tag => r.body)
    );
  }

  /** Path part for operation `apiTagsTagIdPut()` */
  static readonly ApiTagsTagIdPutPath = '/api/tags/{tagId}';

  /**
   * Update tag by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTagsTagIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiTagsTagIdPut$Response(params: ApiTagsTagIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Tag>> {
    return apiTagsTagIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update tag by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTagsTagIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiTagsTagIdPut(params: ApiTagsTagIdPut$Params, context?: HttpContext): Observable<Tag> {
    return this.apiTagsTagIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<Tag>): Tag => r.body)
    );
  }

  /** Path part for operation `apiTagsTagIdDelete()` */
  static readonly ApiTagsTagIdDeletePath = '/api/tags/{tagId}';

  /**
   * Delete tag by ID.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiTagsTagIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTagsTagIdDelete$Response(params: ApiTagsTagIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Tag>> {
    return apiTagsTagIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete tag by ID.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiTagsTagIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiTagsTagIdDelete(params: ApiTagsTagIdDelete$Params, context?: HttpContext): Observable<Tag> {
    return this.apiTagsTagIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<Tag>): Tag => r.body)
    );
  }

}
