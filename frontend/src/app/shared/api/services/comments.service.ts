/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { apiPostsPostIdCommentsCommentIdDelete } from '../fn/comments/api-posts-post-id-comments-comment-id-delete';
import { ApiPostsPostIdCommentsCommentIdDelete$Params } from '../fn/comments/api-posts-post-id-comments-comment-id-delete';
import { apiPostsPostIdCommentsCommentIdPut } from '../fn/comments/api-posts-post-id-comments-comment-id-put';
import { ApiPostsPostIdCommentsCommentIdPut$Params } from '../fn/comments/api-posts-post-id-comments-comment-id-put';
import { apiPostsPostIdCommentsGet } from '../fn/comments/api-posts-post-id-comments-get';
import { ApiPostsPostIdCommentsGet$Params } from '../fn/comments/api-posts-post-id-comments-get';
import { apiPostsPostIdCommentsPost } from '../fn/comments/api-posts-post-id-comments-post';
import { ApiPostsPostIdCommentsPost$Params } from '../fn/comments/api-posts-post-id-comments-post';
import { Comment } from '../models/comment';

@Injectable({ providedIn: 'root' })
export class CommentsService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `apiPostsPostIdCommentsGet()` */
  static readonly ApiPostsPostIdCommentsGetPath = '/api/posts/{postId}/comments';

  /**
   * Get all comments for a post.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPostsPostIdCommentsGet()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPostsPostIdCommentsGet$Response(params: ApiPostsPostIdCommentsGet$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<Comment>>> {
    return apiPostsPostIdCommentsGet(this.http, this.rootUrl, params, context);
  }

  /**
   * Get all comments for a post.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPostsPostIdCommentsGet$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPostsPostIdCommentsGet(params: ApiPostsPostIdCommentsGet$Params, context?: HttpContext): Observable<Array<Comment>> {
    return this.apiPostsPostIdCommentsGet$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<Comment>>): Array<Comment> => r.body)
    );
  }

  /** Path part for operation `apiPostsPostIdCommentsPost()` */
  static readonly ApiPostsPostIdCommentsPostPath = '/api/posts/{postId}/comments';

  /**
   * Create a new comment for a post.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPostsPostIdCommentsPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiPostsPostIdCommentsPost$Response(params: ApiPostsPostIdCommentsPost$Params, context?: HttpContext): Observable<StrictHttpResponse<Comment>> {
    return apiPostsPostIdCommentsPost(this.http, this.rootUrl, params, context);
  }

  /**
   * Create a new comment for a post.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPostsPostIdCommentsPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiPostsPostIdCommentsPost(params: ApiPostsPostIdCommentsPost$Params, context?: HttpContext): Observable<Comment> {
    return this.apiPostsPostIdCommentsPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<Comment>): Comment => r.body)
    );
  }

  /** Path part for operation `apiPostsPostIdCommentsCommentIdPut()` */
  static readonly ApiPostsPostIdCommentsCommentIdPutPath = '/api/posts/{postId}/comments/{commentId}';

  /**
   * Update a comment.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPostsPostIdCommentsCommentIdPut()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiPostsPostIdCommentsCommentIdPut$Response(params: ApiPostsPostIdCommentsCommentIdPut$Params, context?: HttpContext): Observable<StrictHttpResponse<Comment>> {
    return apiPostsPostIdCommentsCommentIdPut(this.http, this.rootUrl, params, context);
  }

  /**
   * Update a comment.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPostsPostIdCommentsCommentIdPut$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  apiPostsPostIdCommentsCommentIdPut(params: ApiPostsPostIdCommentsCommentIdPut$Params, context?: HttpContext): Observable<Comment> {
    return this.apiPostsPostIdCommentsCommentIdPut$Response(params, context).pipe(
      map((r: StrictHttpResponse<Comment>): Comment => r.body)
    );
  }

  /** Path part for operation `apiPostsPostIdCommentsCommentIdDelete()` */
  static readonly ApiPostsPostIdCommentsCommentIdDeletePath = '/api/posts/{postId}/comments/{commentId}';

  /**
   * Delete a comment.
   *
   *
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `apiPostsPostIdCommentsCommentIdDelete()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPostsPostIdCommentsCommentIdDelete$Response(params: ApiPostsPostIdCommentsCommentIdDelete$Params, context?: HttpContext): Observable<StrictHttpResponse<Comment>> {
    return apiPostsPostIdCommentsCommentIdDelete(this.http, this.rootUrl, params, context);
  }

  /**
   * Delete a comment.
   *
   *
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `apiPostsPostIdCommentsCommentIdDelete$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  apiPostsPostIdCommentsCommentIdDelete(params: ApiPostsPostIdCommentsCommentIdDelete$Params, context?: HttpContext): Observable<Comment> {
    return this.apiPostsPostIdCommentsCommentIdDelete$Response(params, context).pipe(
      map((r: StrictHttpResponse<Comment>): Comment => r.body)
    );
  }

}
