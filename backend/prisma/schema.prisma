generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model comments {
  id         Int       @id @default(autoincrement())
  content    String
  postId    Int
  authorId  Int
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @db.Timestamptz(6)
  author      users     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comments_author")
  posts      posts     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_comments_post")
}

model posts {
  id         Int        @id @default(autoincrement())
  title      String     @db.VarChar(255)
  content    String
  authorId  Int
  published  Boolean?   @default(false)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  comments   comments[]
  author      users      @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_posts_author")
}

model users {
  id         Int        @id @default(autoincrement())
  username   String     @unique @db.VarChar(50)
  email      String     @unique @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @default(now()) @db.Timestamptz(6)
  password   String     @db.VarChar(255)
  comments   comments[]
  posts      posts[]
  followers  userFollows[] @relation("followers")
  following  userFollows[] @relation("following")
  followersCount  Int @default(0)
  followingCount  Int @default(0)
}

model userFollows {
  id          Int    @id @default(autoincrement())
  followerId  Int
  followingId Int
  follower    users  @relation("following", fields: [followerId], references: [id])
  following   users  @relation("followers", fields: [followingId], references: [id])
  @@unique([followerId, followingId])
}